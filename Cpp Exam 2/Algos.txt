Question Number 1:
Part A
Algorithm
1. Find the length of the string say len. Now, find the mid as mid = len / 2.
2. Push all the elements till mid into the stack i.e. str[0…mid-1].
3. If the length of the string is odd then neglect the middle character.
4. Till the end of the string, keep popping elements from the stack and compare it with the current character i.e. string[i].
5. If there is mismatch then the string is not a palindrome. If all the elements match then the string is a palindrome.

Part B
Algorithm
1. Find the length of the string say len. Now, find the mid as mid = len / 2.
2. Push all the elements till mid into the stack i.e. str[0…mid-1].
3. If the length of the string is odd then neglect the middle character.
4. Till the end of the string, keep popping elements from the stack and compare it with the current character i.e. string[i].
5. If there is mismatch then the string is not a palindrome. If all the elements match then the string is a palindrome.

Question Number 2:
Algorithm
Step 1: Define a stack to hold brackets
Step 2: Traverse the expression from left to right
Step 2.1: If the character is opening bracket (, or { or [, then push it into stack
Step 2.2: If the character is closing bracket ), } or ] Then pop from stack, and if the popped character is matched with the starting bracket then it is ok. otherwise they are not balanced.
Step 3: After traversal if the starting bracket is present in the stack then it is not balanced.

Question Number 3:
Algorithm
Step 1: Define a stack to hold brackets
Step 2: Traverse the expression from left to right
Step 2.1: If the character is opening bracket (, or { or [, then push it into stack
Step 2.2: If the character is closing bracket ), } or ] Then pop from stack, and if the popped character is matched with the starting bracket then it is ok. otherwise they are not balanced.
Step 3: After traversal if the starting bracket is present in the stack then it is not balanced.

Question Number 4:
Algorithm
1. Scan the infix expression from left to right.
2. If the scanned character is an operand, output it.
3. Else,
      1 If the precedence of the scanned operator is greater than the precedence of the operator in the stack(or the stack is empty or the stack contains a ‘(‘ ), push it.
      2 Else, Pop all the operators from the stack which are greater than or equal to in precedence than that of the scanned operator. After doing that Push the scanned operator to the stack. (If you encounter parenthesis while popping then stop there and push the scanned operator in the stack.)
4. If the scanned character is an ‘(‘, push it to the stack.
5. If the scanned character is an ‘)’, pop the stack and output it until a ‘(‘ is encountered, and discard both the parenthesis.
6. Repeat steps 2-6 until infix expression is scanned.
7. Print the output
8. Pop and output from the stack until it is not empty.

Question Number 5:
1. Create a stack to store operands (or values).
2. Scan the given expression and do following for every scanned element.
    1. If the element is a number, push it into the stack
    2. If the element is a operator, pop operands for the operator from stack. Evaluate the operator and push the result back to the stack
3. When the expression is ended, the number in the stack is the final answer